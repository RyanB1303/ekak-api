require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/kelompok_anggarans', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # KelompokAnggaran. As you add validations to KelompokAnggaran, be sure to
  # adjust the attributes here as well.
  let(:lembaga) { create(:lembaga) }
  let(:tahun) { create(:tahun) }
  let(:user) { create(:user) }

  let(:valid_attributes) do
    {
      nama_kelompok: 'Murni',
      keterangan: 'Contoh',
      lembaga_id: lembaga.id
    }
  end

  let(:invalid_attributes) do
    {
      nama_kelompok: '',
      keterangan: 'Contoh',
      lembaga_id: lembaga.id
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # KelompokAnggaransController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      KelompokAnggaran.create! valid_attributes
      get api_v1_kelompok_anggarans_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    context 'with valid headers' do
      it 'renders a successful response' do
        kelompok_anggaran = KelompokAnggaran.create! valid_attributes
        get api_v1_kelompok_anggaran_url(kelompok_anggaran), headers: valid_headers, as: :json
        expect(response).to be_successful
      end
      context 'without valid headers' do
        it 'render an error' do
          kelompok_anggaran = KelompokAnggaran.create! valid_attributes
          get api_v1_kelompok_anggaran_url(kelompok_anggaran), headers: {}, as: :json
          expect(response).to_not be_successful
        end
      end
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new KelompokAnggaran' do
        expect do
          post api_v1_kelompok_anggarans_url,
               params: { kelompok_anggaran: valid_attributes }, headers: valid_headers, as: :json
        end.to change(KelompokAnggaran, :count).by(1)
      end

      it 'renders a JSON response with the new kelompok_anggaran' do
        post api_v1_kelompok_anggarans_url,
             params: { kelompok_anggaran: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new KelompokAnggaran' do
        expect do
          post api_v1_kelompok_anggarans_url,
               params: { kelompok_anggaran: invalid_attributes }, as: :json
        end.to change(KelompokAnggaran, :count).by(0)
      end

      it 'renders a JSON response with errors for the new kelompok_anggaran' do
        post api_v1_kelompok_anggarans_url,
             params: { kelompok_anggaran: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_lembaga) do
        create(:lembaga, nama_lembaga: 'Kab Malang')
      end
      let(:new_attributes) do
        {
          nama_kelompok: 'Perubahan',
          lembaga_id: new_lembaga.id
        }
      end

      it 'updates the requested kelompok_anggaran' do
        kelompok_anggaran = KelompokAnggaran.create! valid_attributes
        patch api_v1_kelompok_anggaran_url(kelompok_anggaran),
              params: { kelompok_anggaran: new_attributes }, headers: valid_headers, as: :json
        kelompok_anggaran.reload
        res_update = JSON.parse(response.body).deep_symbolize_keys
        expect(res_update[:nama_kelompok]).to eq 'Perubahan'
        expect(res_update[:lembaga_id]).to eq new_lembaga.id
      end

      it 'renders a JSON response with the kelompok_anggaran' do
        kelompok_anggaran = KelompokAnggaran.create! valid_attributes
        patch api_v1_kelompok_anggaran_url(kelompok_anggaran),
              params: { kelompok_anggaran: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the kelompok_anggaran' do
        kelompok_anggaran = KelompokAnggaran.create! valid_attributes
        patch api_v1_kelompok_anggaran_url(kelompok_anggaran),
              params: { kelompok_anggaran: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested kelompok_anggaran' do
      kelompok_anggaran = KelompokAnggaran.create! valid_attributes
      expect do
        delete api_v1_kelompok_anggaran_url(kelompok_anggaran), headers: valid_headers, as: :json
      end.to change(KelompokAnggaran, :count).by(-1)
    end
  end
end
