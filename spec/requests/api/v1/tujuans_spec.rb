require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/tujuans', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Tujuan. As you add validations to Tujuan, be sure to
  # adjust the attributes here as well.
  let(:opd) { create(:opd) }
  let(:valid_attributes) do
    {
      tujuan: 'Tujuan Contoh 123456',
      tujuanable_type: 'Opd',
      tujuanable_id: opd.id
    }
  end

  let(:invalid_attributes) do
    {
      tujuan: 'short'
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TujuansController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    user = create(:user)
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Tujuan.create! valid_attributes
      get api_v1_tujuans_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      tujuan = Tujuan.create! valid_attributes
      get api_v1_tujuan_url(tujuan), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Tujuan' do
        expect do
          post api_v1_tujuans_url,
               params: { tujuan: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Tujuan, :count).by(1)
      end

      it 'renders a JSON response with the new tujuan' do
        post api_v1_tujuans_url,
             params: { tujuan: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Tujuan' do
        expect do
          post api_v1_tujuans_url,
               params: { tujuan: invalid_attributes }, as: :json
        end.to change(Tujuan, :count).by(0)
      end

      it 'renders a JSON response with errors for the new tujuan' do
        post api_v1_tujuans_url,
             params: { tujuan: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:lembaga) { create(:lembaga) }
      let(:new_attributes) do
        {
          tujuan: 'New accepted tujuan',
          tujuanable_type: 'Lembaga',
          tujuanable_id: lembaga.id
        }
      end

      it 'updates the requested tujuan' do
        tujuan = Tujuan.create! valid_attributes
        patch api_v1_tujuan_url(tujuan),
              params: { tujuan: new_attributes }, headers: valid_headers, as: :json
        tujuan.reload
        update_res = JSON.parse(response.body).deep_symbolize_keys
        expect(tujuan.tujuanable).to eq(lembaga)
        expect(update_res[:tujuan]).to eq('New accepted tujuan')
      end

      it 'renders a JSON response with the tujuan' do
        tujuan = Tujuan.create! valid_attributes
        patch api_v1_tujuan_url(tujuan),
              params: { tujuan: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the tujuan' do
        tujuan = Tujuan.create! valid_attributes
        patch api_v1_tujuan_url(tujuan),
              params: { tujuan: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested tujuan' do
      tujuan = Tujuan.create! valid_attributes
      expect do
        delete api_v1_tujuan_url(tujuan), headers: valid_headers, as: :json
      end.to change(Tujuan, :count).by(-1)
    end
  end
end
